local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local savedPosition = nil
local frozen = false

local function FreezeCharacter(state)
	if state then
		humanoidRootPart.Anchored = true
		frozen = true
	else
		humanoidRootPart.Anchored = false
		frozen = false
	end
end

local function SavePosition()
	savedPosition = humanoidRootPart.CFrame
	FreezeCharacter(true)
end

local function DeletePosition()
	savedPosition = nil
	FreezeCharacter(false)
end

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 180, 0, 100)
frame.Position = UDim2.new(0.05, 0, 0.7, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BackgroundTransparency = 0.2
frame.BorderSizePixel = 2
frame.Visible = true
frame.Parent = screenGui

local saveBtn = Instance.new("TextButton")
saveBtn.Size = UDim2.new(0.9, 0, 0.4, 0)
saveBtn.Position = UDim2.new(0.05, 0, 0.1, 0)
saveBtn.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
saveBtn.Text = "Save Posisi"
saveBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
saveBtn.Font = Enum.Font.SourceSansBold
saveBtn.TextScaled = true
saveBtn.Parent = frame

local deleteBtn = Instance.new("TextButton")
deleteBtn.Size = UDim2.new(0.9, 0, 0.4, 0)
deleteBtn.Position = UDim2.new(0.05, 0, 0.55, 0)
deleteBtn.BackgroundColor3 = Color3.fromRGB(255, 80, 80)
deleteBtn.Text = "Delete Posisi"
deleteBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
deleteBtn.Font = Enum.Font.SourceSansBold
deleteBtn.TextScaled = true
deleteBtn.Parent = frame

saveBtn.MouseButton1Click:Connect(SavePosition)
deleteBtn.MouseButton1Click:Connect(DeletePosition)

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 100, 0, 40)
toggleBtn.Position = UDim2.new(0.05, 0, 0.65, 0)
toggleBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleBtn.Font = Enum.Font.SourceSansBold
toggleBtn.TextScaled = true
toggleBtn.Text = "Hide"
toggleBtn.Parent = screenGui

toggleBtn.MouseButton1Click:Connect(function()
	frame.Visible = not frame.Visible
	if frame.Visible then
		toggleBtn.Text = "Hide"
	else
		toggleBtn.Text = "Open"
	end
end)

local function MakeDraggable(gui)
	local dragging = false
	local dragInput, mousePos, framePos

	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			mousePos = input.Position
			framePos = gui.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - mousePos
			gui.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
		end
	end)
end

MakeDraggable(frame)
MakeDraggable(toggleBtn)

loadstring(game:HttpGet("https://raw.githubusercontent.com/MajestySkie/list/refs/heads/main/games"))()

local player = game.Players.LocalPlayer
local VirtualUser = game:GetService("VirtualUser")

player.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

task.spawn(function()
    while task.wait(30) do
        local char = player.Character
        if char and char:FindFirstChild("HumanoidRootPart") then
            char.HumanoidRootPart.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0.01)
        end
    end
end)

local mt = getrawmetatable(game)
setreadonly(mt, false)

local old = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    
    if method == "UserOwnsGamePassAsync" then
        return true
    end

    return old(self, unpack(args))
end)
